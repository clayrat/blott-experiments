let t : (A : [box U<0>]) (B : [box U<0>]) -> ([unlock A] -> [box [unlock B]]) -> [box [unlock A] -> [unlock B]] =
 fun A B f -> [lock fun a -> [unlock (f a)]]

let subst : (T : U<0>) (P : T -> U<0>) (a : T) (b : T) -> (Id T a b) -> (P a) -> (P b) =
  fun _ P _ _ prf ->
  match prf at x y prf -> (P x) -> (P y) with
  | refl _ -> fun x -> x 

let substN : (A : nat -> U<0>) (n : nat) (m : nat) -> (Id nat n m) -> (A n) -> (A m) =
  subst nat

let sym : (T : U<0>) (a : T) (b : T) -> (Id T a b) -> (Id T b a) =
 fun T _ _ prf ->  
 match prf at a b _ -> (Id T b a) with
  | refl x -> refl x

let trans : (T : U<0>) (a : T) (b : T) (c : T) -> (Id T a b) -> (Id T b c) -> (Id T a c) =
 fun T _ _ c ab ->  
  match ab at a b prf -> (Id T b c) -> (Id T a c) with
   | refl _ -> fun bc -> bc

normalize def trans
